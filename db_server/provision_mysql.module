<?php
/**
 * @file
 *    Mysql provisioning module.
 *
 * The goal of this module is to create mysql databases and user accounts, for sites that are about to be created.
 * It uses the provision API to tie into the right places in the site creation work flow.
 */
 
/**
 * @ingroup provisionui
 * @{
 */

 /**
  * Implementation of hook_help().
  */
 function provision_mysql_help($section) {
   switch ($section) {
     case 'admin/help/provision#requirements':
       $username = provision_get_script_owner();
       $output .= "<ol>";
       $command = <<<EOF
     [$username@hm2 ~]$ mysql -uroot -pXXXXXXXXX mysql

     mysql> grant create, drop, grant option  on *.* to 'username_here'@'localhost'
         -> identified by 'mypassword';
     Query OK, 0 rows affected (0.00 sec)

     mysql> flush privileges;
     Query OK, 0 rows affected (0.00 sec)
EOF;
       $output .= '<li>' . t('<p><strong>Mysql user account capable of creating new databases.</strong>
                To be able to create new sites, the provisioning framework will need to be able to create new databases and users. 
                It is not recommended using the mysql root password for this, but any account with the correct permissions will do.</p>
                <p><strong>To configure:</strong> Log in to your mysql server as root, and type in the following command:
                <pre>@command_text</pre></p>', array('@command_text' => $command)) . '</li>';            
       $output .= "</ol>";
       return $output;
       break;
   }
}

/**
 * Implementation of provision_service()
 */
function provision_mysql_provision_service() {
  return array("db_server" => t("Mysql database server"));
}

/**
 * Implementation of provision_configure
 */
function provision_mysql_provision_configure($node = null) {
  if (!is_object($node) && ($nid = variable_get('hosting_own_db_server', 0))) {
    $node = node_load($nid);
  }
  $form['db_type'] = array('#type' => 'hidden', '#value' => 'mysql');
  
  $form['db_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Mysql server hostname'),
    '#description' => t('The mysql server to connect to.'),
    '#size' => 30,
    '#default_value' => ($node->db_host) ? $node->db_host : variable_get('provision_db_host', 'localhost'),
    '#maxlength' => 64,
  );
  
  $form['db_user'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Mysql user account'),
    '#description' => t('The user that will be used to create users and databases for new sites.'),
    '#size' => 40,
    '#default_value' => ($node->db_user) ? $node->db_user : variable_get('provision_db_user', 'root'),
    '#maxlength' => 255,
  );
  if ($node->db_passwd) {
    $passwd_description = t('<strong>You have already set a password for this database server.</strong><br />');
  }
  $form['db_passwd'] = array(
    '#type' => 'password_confirm',
    '#required' => (variable_get("provision_db_password", TRUE)) ? FALSE : TRUE,
    '#title' => t('Mysql user password'),
    '#description' => $passwd_description . t('The user account that will be used to create new mysql users and databases for new sites'),
    '#size' => 30,
    '#maxlength' => 64,
  );
  
  return $form;
}
/**
 * @} end "ingroup provisionui"
 */


function provision_mysql_provision_pre_install($url, &$data) {
  $data['site_db_type'] = 'mysql'; # only support innodb. for now.
  $data['site_db_host'] = ($data['site_db_host']) ? $data['site_db_host'] : variable_get('provision_db_host', 'localhost');
  $data['site_db_passwd'] = user_password(); # generate a random password for use
  if ($data['site_id']) {
    $data['site_db_name'] = 'site_' . $data['site_id'];
    $data['site_db_username'] = $data['site_db_name']; // mysql has some really really stupid rules about who db / usernames, so site id is the safest.
  }
  else {
    $data['site_db_name'] = ereg_replace("^www\.", "", str_replace('-', '_', str_replace(".", "", $url)));
    $data['site_db_username'] = substr($data['site_db_name'], 0, 16);
  }

  provision_set_active_db(_provision_master_db_url());
    
  if ( _provision_mysql_database_exists($data['site_db_name']) ) {
    _provision_mysql_drop_database($data['site_db_name']);
  }
  
  _provision_mysql_create_database($data['site_db_name']);
  
  if ( !_provision_mysql_database_exists($data['site_db_name']) ) {
   provision_set_error(PROVISION_DB_ERROR);
   provision_log("error", "Database could not be created.");
   provision_set_active_db();
   return FALSE;
  }
  
  _provision_mysql_grant($data['site_db_name'], $data['site_db_username'], $data['site_db_passwd']);
  _provision_mysql_grant($data['site_db_name'], $data['site_db_username'], $data['site_db_passwd'], $data['site_db_host']);

  if ($data['site_mysql_old_passwords']) {
    _provision_mysql_old_password($data['site_db_username'], $data['site_db_passwd']);
    _provision_mysql_old_password($data['site_db_username'], $data['site_db_passwd'], $data['site_db_host']);
  }
  _provision_mysql_flush();
  provision_set_active_db();
  #TODO : Test to confirm that the database is actually writeable. Taking this on faith for now.
}


function provision_mysql_provision_backup($url, &$data) {
  provision_log("backup", "Generating mysql dump for $url.");
  provision_shell_exec("mysqldump -u%s -p%s %s > sites/%s/database.sql", $data['site_db_username'], $data['site_db_passwd'], $data['site_db_name'], $url); 
  provision_shell_exec("cd sites/%; tar -rf %s database.sql; rm database.sql", $url, $data['backup_file']);
}

function _provision_mysql_database_exists($name) {
  return db_result(db_query("SHOW DATABASES LIKE '%s'", $data['site_db_name']));
}

function _provision_mysql_drop_database($name) {
  db_query("DROP DATABASE %s", $name);
}

function _provision_mysql_create_database($name) {
  db_query("CREATE DATABASE %s", $name);  
}

function _provision_mysql_can_create_database() {
  $test = 'provision_test';
  _provision_mysql_create_database($test);
  if (_provision_mysql_database_exists($test)) {
    _provision_mysql_drop_database($test);
    return true;
  }
  return false;
}

function _provision_mysql_grant($name, $username, $password, $host = '') {
  $host = ($host) ? $host : '%';
  db_query("GRANT ALL PRIVILEGES ON %s.* TO %s@`%s` IDENTIFIED BY '%s'", $name, $username, $host, $password);
}

function _provision_mysql_old_password($username, $password, $host = '') {
  $host = ($host) ? $host : '%';  
  db_query("SET PASSWORD FOR '%s'@'%s' = OLD_PASSWORD('%s')", $username, $host, $password);
}

function _provision_mysql_flush() {
  db_query("FLUSH PRIVILEGES");
}

function _provision_master_db_url($data = array()) {
  return sprintf("mysql://%s:%s@%s/mysql", variable_get('provision_db_user', 'root'), variable_get('provision_db_password', 'root'), variable_get('provision_db_host', 'localhost'));
}


/**
 * Implementation of hook_provision_verify
 */
function provision_mysql_provision_verify() {
  provision_set_active_db(_provision_master_db_url());
  if (!_provision_mysql_can_create_database()) {
    provision_set_error(PROVISION_DB_ERROR | PROVISION_FRAMEWORK_ERROR);
    provision_log('error', t('Unable to create new databases.'));
  }
  else {
    provision_log("message", t('Mysql can create new databases.'));
  }
  provision_set_active_db();
}
