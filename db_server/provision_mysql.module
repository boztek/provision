<?php
/**
 * @file
 *    Mysql provisioning module.
 *
 * The goal of this module is to create mysql databases and user accounts, for sites that are about to be created.
 * It uses the provision API to tie into the right places in the site creation work flow.
 */


include_once('provision.mysql.inc');

/**
 * @ingroup provisionui
 * @{
 */

 /**
  * Implementation of hook_help().
  */
 function provision_mysql_help($section) {
   switch ($section) {
     case 'admin/help/provision#requirements':

       $output .= '<li>' . _provision_requirements('mysql_user') . '</li>';
       $output .= "</ol>";
       return $output;
       break;
   }
 }

function _provision_mysql_user_requirements() {
   $username = PROVISION_SCRIPT_USER;
   $output .= "<ol>";
   $command = <<<EOF
     [$username@hm2 ~]$ mysql -uroot -pXXXXXXXXX mysql

     mysql> grant create, drop, grant option  on *.* to 'username_here'@'localhost'
         -> identified by 'mypassword';
     Query OK, 0 rows affected (0.00 sec)

     mysql> flush privileges;
     Query OK, 0 rows affected (0.00 sec)
EOF;
 $help['summary'] = t('<p><strong>Mysql user account capable of creating new databases.</strong>
   To be able to create new sites, the provisioning framework will need to be able 
   to create new databases and users. It is not recommended using the mysql root password for this, 
   but any account with the correct permissions will do.</p>');

 $help['configuration'] = t('<p><strong>To configure:</strong> 
   Log in to your mysql server as root, and type in the following command:
   <pre>@command_text</pre></p>', array('@command_text' => $command));     
  return $help;
}

/**
 * Implementation of provision_service()
 */
function provision_mysql_provision_service() {
  return array("db_server" => t("Mysql database server"));
}

/**
 * Implementation of provision_configure
 */
function provision_mysql_provision_configure($node = null) {
  if (!is_object($node) && ($nid = variable_get('hosting_own_db_server', 0))) {
    $node = node_load($nid);
  }
  $form['db_type'] = array('#type' => 'hidden', '#value' => ($node->db_type) ? $node->db_type : PROVISION_DB_TYPE);
  
  $form['db_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Database server hostname'),
    '#description' => t('The address of the database server to connect to.'),
    '#size' => 30,
    '#default_value' => ($node->db_host) ? $node->db_host : PROVISION_DB_HOST,
    '#maxlength' => 64,
    '#weight' => 0,
  );
  
  $form['db_user'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Username'),
    '#description' => t('The user that will be used to create users and databases for new sites.'),
    '#size' => 40,
    '#default_value' => ($node->db_user) ? $node->db_user : PROVISION_DB_USER,
    '#maxlength' => 255,
    '#weight' => 5,
  );
  if ($node->db_passwd) {
    $passwd_description = t('<strong>You have already set a password for this database server.</strong><br />');
  }
  $form['db_passwd'] = array(
    '#type' => 'password_confirm',
    '#required' => (PROVISION_DB_PASSWD) ? FALSE : TRUE,
    '#description' => $passwd_description . t('The user account that will be used to create new mysql users and databases for new sites'),
    '#size' => 30,
    '#weight' => 10
  );
  
  return $form;
}
/**
 * @} end "ingroup provisionui"
 */


function provision_mysql_provision_pre_install($url, &$data) {
  $data['site_db_type'] = ($data['site_db_type']) ? $data['site_db_type'] : PROVISION_DB_TYPE;
  $data['site_db_host'] = ($data['site_db_host']) ? $data['site_db_host'] : PROVISION_DB_HOST;

  # generate a random password for use
  $data['site_db_passwd'] = user_password(); 
  $data['site_db_name'] = _provision_mysql_suggest_db_name($url, $data);
  $data['site_db_user'] = $data['site_db_name']; 

  return _provision_mysql_new_site_db($data['site_db_name'], $data['site_db_user'], $data['site_db_passwd'], $data['site_db_host']);
}

function provision_mysql_provision_pre_install_rollback($url, &$data) {
  _provision_mysql_destroy_site_db($data['site_db_name'], $data['site_db_user'], $data['site_db_passwd'], $data['site_db_host']);
  unset($data['site_db_host']);
  unset($data['site_db_type']);
  unset($data['site_db_passwd']);
  unset($data['site_db_user']);
  unset($data['site_db_name']);
}

function provision_mysql_provision_pre_restore($url, &$data) {
  // store a backup of the credentials of the site.
  $data['old_site_db_name'] = $data['site_db_name'];
  $data['old_site_db_passwd'] = $data['site_db_passwd'];
  $data['old_site_db_user'] = $data['site_db_user'];
  $data['old_site_db_host'] = $data['site_db_host'];

  # generate a random password for use
  $data['site_db_passwd'] = user_password(); 
  $data['site_db_name'] = _provision_mysql_suggest_db_name($url, $data);
  $data['site_db_user'] = $data['site_db_name'];

  $success = _provision_mysql_new_site_db($data['site_db_name'], $data['site_db_user'], $data['site_db_passwd'], $data['site_db_host']);
  if ($success) {
    _provision_mysql_import_dump(PROVISION_SITES_PATH . '/' . $url . '.restore/database.sql', $data['site_db_name'], $data['site_db_user'], $data['site_db_passwd'], $data['site_db_host']);
  }
  else {
    provision_set_error(PROVISION_DB_ERROR);
    provision_log("error", "could not create new database to be imported into");
  }
}

function provision_mysql_provision_pre_restore_rollback($url, &$data) {
  _provision_mysql_destroy_site_db($data['site_db_name'], $data['site_db_user'], $data['site_db_passwd'], $data['site_db_host']);

  //Restore the original database credentials of the site.
  foreach ($keys as $key) {
    $data[$key] = $data['old_' . $key];
  }
}

/**
 * Implementation of hook_provision_delete()
 *
 * This will drop the database, revoke the privileges and flush the privileges.
 */
function provision_mysql_provision_delete($url, &$data) {
  return _provision_mysql_destroy_site_db($data['site_db_name'], $data['site_db_user'], $data['site_db_passwd'], $data['site_db_host']);
}

// Rollback doesn't apply here yet. Unless we trigger a restore of the first dump
// made. Which could go on infinitely if something is really long.
function provision_mysql_provision_post_restore($url, &$data) {
  return _provision_mysql_destroy_site_db($data['old_site_db_name'], $data['old_site_db_user'], $data['old_site_db_passwd'], $data['old_site_db_host']);
}


function provision_mysql_provision_backup($url, &$data) {
  provision_log("backup", "Generating mysql dump for $url.");
  provision_shell_exec("mysqldump -u%s -p%s %s > sites/%s/database.sql", $data['site_db_user'], $data['site_db_passwd'], $data['site_db_name'], $url); 
  provision_shell_exec("cd sites/%; tar -rf %s database.sql; rm database.sql", $url, $data['backup_file']);
}

/**
 * Implementation of hook_provision_verify
 *
 * Can't be rolled back.
 */
function provision_mysql_provision_verify() {
  provision_set_active_db(_provision_master_db_url());
  if (!_provision_mysql_can_create_database()) {
    provision_set_error(PROVISION_DB_ERROR | PROVISION_FRAMEWORK_ERROR);
    provision_log('error', t('Unable to create new databases.'));
  }
  else {
    provision_log("message", t('Mysql can create new databases.'));
  }
  provision_set_active_db();
}





