<?php
// $Id$
/**
 * @file
 * Apache provisioning module
 * This module simply serves to generate the virtual host entry, and make sure apache gets reloaded properly.
 * Because Drupal is running via the command line for the entirety of this process, it is only necessary to make
 * it available online once everything has been completed.
 *
 * This module still requires configuration and sanity checks. Need to figure out a way to inspect the apache configuration, 
 * to ensure that the sites are getting loaded up correctly.
 */

function provision_apache_provision_service() {
  return array( "web_server" => t("Web Server"));
}

/**
 * Implementation of hook_help().
 */
function provision_apache_help($section) {
  switch ($section) {
    case 'admin/help/provision#requirements':
      $output .= _provision_requirements('config_path');
      $output .= _provision_requirements('httpd_conf');
      $output .= _provision_requirements('visudo');
      return $output;
      break;
  }
}

function _provision_config_path_requirements() {
  $username = PROVISION_SCRIPT_USER;
  $group = PROVISION_WEB_GROUP;
  $vhost_path = PROVISION_CONFIG_PATH;
  $mkdir_cmd['@vhost_path'] = $vhost_path;
  $mkdir_cmd['@provision_link'] = url('admin/settings/provision');
  $mkdir_cmd['@mkdir_cmd'] = <<<EOF
    [$username@hm2 ~]$ mkdir -p $vhost_path
    [$username@hm2 ~]$ chown $username:$username $vhost_path
    [$username@hm2 ~]$ chmod 0700 $vhost_path
EOF;

  $help['title'] = t('Write access to a directory to store configuration information');
  $help['summary'] = t('The Provision framework takes special care to make sure that the file permissions of the 
                       hosted sites are always as safe as can be, especially to make sure that the web server does 
                       not have the ability to modify the code of the site, therefore this information is required 
                       to assure that safety while keeping the sites accessible. 
                       The recommended path is directly above your platform path, but it can be anywhere.');

  $help['configuration'][] = t('Based on your server configuration we have determined that your path should be <code>@vhost_path</code>, 
    but you can change it change them in the <a href="@provision_link">provisioning section</a>.', $mkdir_cmd);
  $help['configuration'][] = t(' please enter the following commands : <pre>@mkdir_cmd</pre>', $mkdir_cmd);

  return $help;

}

function _provision_httpd_conf_requirements() {
  $vhost_path = PROVISION_VHOST_PATH;
  $vhost_line = <<<EOF
    Include $vhost_path
EOF;
  $help['title'] = t('Modify the server\'s httpd.conf file');
  $help['summary'] = t('To allow the system to load additional virtual hosts that are generated,
                        you are required to add a line to your httpd.conf file.</p>
                        The location of this file differs between distributions, 
                        but is most commonly found in <code>/etc/httpd</code> or <code>/etc/apache</code>.');

  $help['configuration'] = t('Once you have determined the location of your httpd.conf file, add the following line to it:
                            <pre>@vhost_line</pre>', array('@vhost_line' => $vhost_line));

  return $help;
}

function _provision_visudo_requirements() {
  $username = PROVISION_SCRIPT_USER;
  $cmd = trim(str_replace("sudo", '', PROVISION_RESTART_CMD));
  $cmd = substr($cmd, 0, strpos($cmd, " "));
  $visudo_cmd['@visudo_cmd'] = <<<EOF
    [$username@hm2 ~]$ sudo su -
    password:
    [root@hm2 ~]$ visudo
EOF;
  $visudo_cmd['@visudo_line'] = <<<EOF
    $username ALL=NOPASSWD: $cmd
EOF;

  $help['title'] = t('Permission to restart the httpd daemon as the user the script is running as');
  $help['summary'] = t('As the provisioning framework should not be run as root,
                         and the web server group should not be allowed access to the 
                         functionality to stop/start the web server, it is required that you provide access
                         to the Apache restart command for the user account the script will be running as. 
                         If this is not configured, every command will ask for a sudo password when restarting the server.');
  $help['configuration'] = t('Run the visudo command: <pre>@visudo_cmd</pre>
                             Then add the following line to the file: <pre>@visudo_line</pre>', 
                             $visudo_cmd);
  return $help;

}

/**
 * Hook into central configuration form for provisioning framework.
 */
function provision_apache_provision_configure($node = NULL) {
  // We need to define form elements for the node's title and body.
  $form['restart_cmd'] = array(
      '#type' => 'textfield',
      '#title' => t('Restart command'),
      '#required' => TRUE,
      '#description' => t('The command to run to restart the for new changes to take effect. This is required for the new site to become live'),
      '#default_value' => ($node->restart_cmd) ? $node->restart_cmd : PROVISION_RESTART_CMD,
      '#size' => 40,
      '#maxlength' => 255,
      '#weight' => -20,
  );

  $form['script_user'] = array(
    '#type' => 'textfield',
    '#title' => t('System account'),
    '#required' => TRUE,
    '#description' => t('The system account that the hosted files will belong to, for security reasons.<br />This should be a different to the account the web server is running as.'),
    '#default_value' => ($node->script_user) ? $node->script_user : PROVISION_SCRIPT_USER,
    '#size' => 20,
    '#maxlength' => 255,
    '#weight' => -15,
  );
   
  $form['web_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Web server group'),
    '#required' => TRUE,
    '#description' => t('The group that the hosted files will belong to.<br />This should be the group the web server is running as.'),
    '#default_value' => ($node->web_group) ? $node->web_group : PROVISION_WEB_GROUP,
    '#size' => 20,
    '#maxlength' => 75,
    '#validate' => array('provision_apache_validate_web_group' => array()),
    '#weight' => -10,
  );
  
  $form['config_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Configuration path'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => ($node->config_path) ? $node->config_path : PROVISION_CONFIG_PATH,
    '#description' => t("The path on the server where configuration files will be stored.<br />
        It is essential that this directory should not be accessible via a web browser."),
    '#maxlength' => 255,
    '#weight' => -10,
  );
  
  $form['backup_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Backup path'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => ($node->backup_path) ? $node->backup_path : PROVISION_BACKUP_PATH,
    '#description' => t("The path on the server where backups will be stored.<br />
        It is essential that this directory should not be accessible via a web browser."),
    '#maxlength' => 255,
    '#weight' => -10,
  );
  
  return $form;
}

function provision_apache_validate_web_group($element) {
  $user = $element['#post']['script_user'];
  $group = $element['#post']['web_group'];
  if ($user && $group) {
    if (!provision_user_in_group($user, $group)) {
       form_set_error('web_group', t("The %user user is not in the %group group. For information on how to fix this, please check the !link.", 
         array('%user' => $user, '%group' =>  $group, '!link' => l(t("provisioning requirements"), "admin/help/provision/requirements") )));
    }
  }
}

/**
 * Implementation of hook_provision_templates
 */
function provision_apache_provision_templates() {
  $form['vhost_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Virtual Host configuration template'),
    '#description' => t('The text to use when generating a virtual host configuration file for apache'),
    '#default_value' => variable_get('provision_apache_vhost_template', _provision_apache_default_template()),
    '#cols' => 60,
    '#rows' => 5,
  );
  return $form; 
}

/**
 * The default template provided for the virtual host configuration
 */
function _provision_apache_default_template() {
  return file_get_contents(drupal_get_path('module', 'provision_apache') ."/provision_apache_vhost.tpl.php");
}

/**
 * The default template for disabled sites
 */
function _provision_apache_redirect_template() {
  return file_get_contents(drupal_get_path('module', 'provision_apache') ."/provision_apache_vhost_redirect.tpl.php");
}

/**
 * Implementation of hook_provision_pre_install
 */
function provision_apache_provision_pre_install($url, &$data) {
  return _provision_apache_create_vhost_config($url, $data);
}

/**
 * Implementation of hook_provision_post_install
 */
function provision_apache_provision_post_install($url, &$data) {
  return _provision_apache_restart_apache();  
}

function provision_apache_provision_delete($url, &$data) {
  _provision_apache_delete_vhost_config($url, $data);
  return _provision_apache_restart_apache();  
}

/**
 * Implementation of hook_provision_enable
 */
function provision_apache_provision_enable($url, &$data) {
  _provision_apache_create_vhost_config($url, $data);
  _provision_apache_restart_apache();
}

/**
 * Implementation of hook_provision_disable
 */
function provision_apache_provision_disable($url, &$data) {
  $data['redirect_url'] = PROVISION_WEB_DISABLE_URL;
  _provision_apache_create_vhost_config($url, $data, _provision_apache_redirect_template());
  _provision_apache_restart_apache();
}

/**
 * Implementation of hook_provision_sync
 */
function provision_apache_provision_synch($url, &$data) {
  _provision_apache_create_vhost_config($url, $data);
  _provision_apache_restart_apache();
}

/**
 * Delete virtual host file
 */
function _provision_apache_delete_vhost_config($url, $data) {
  provision_path("unlink", PROVISION_VHOST_PATH ."/$url", TRUE, t("Removed apache virtual host configuration"));
}

/**
 * Generate virtual host file
 */
function _provision_apache_create_vhost_config($url, $data, $template = NULL) {
  if (is_null($template)) {
    $template = variable_get('provision_apache_vhost_template', _provision_apache_default_template());
  }
  provision_log("Notice", t("Generate virtual host configuration file."));
  $writable = provision_path("writable", PROVISION_VHOST_PATH, TRUE , NULL,
      t("Virtual host configuration path @path is not writable."), 
      PROVISION_PERM_ERROR | PROVISION_FRAMEWORK_ERROR);
  if ($writable) {
    $file = fopen(PROVISION_VHOST_PATH .'/'. $url, "w");
    $text = provision_render_config($template, $data);
    fwrite($file, $text);
    fclose($file);
  }
}
 
/**
 * Restart Apache
 */
function _provision_apache_restart_apache() {
  //This is required to be configurable, due to the fact that different hosts might need to do this differently.
  //TODO : test for this instead of relying on a configuration setting?
  $return = drush_shell_exec(escapeshellcmd(PROVISION_RESTART_CMD));
  if (!$return) {
    provision_set_error(PROVISION_WEB_ERROR);
    provision_log("error", "Web server could not be restarted. Changes might not be available until this has been done.");
  }
}

function provision_apache_provision_verify() {
  $exists = _provision_create_dir(PROVISION_VHOST_PATH, t("Virtual host configuration"), 0700);
}

/**
 * Implementation of hook_provision_pre_restore
 */
function provision_apache_provision_pre_restore($url, &$data) {
  $data['redirect_url'] = PROVISION_WEB_MAINTENANCE_URL;
  _provision_apache_create_vhost_config($url, $data, _provision_apache_redirect_template());
  _provision_apache_restart_apache();
}

function provision_apache_provision_pre_restore_rollback($url, $data) {
  _provision_apache_create_vhost_config($url, $data);
  _provision_apache_restart_apache();
  _provision_recursive_delete(PROVISION_SITES_PATH ."/$url.restore");
}

function provision_apache_provision_post_restore($url, &$data) {
  _provision_apache_create_vhost_config($url, $data);
  _provision_apache_restart_apache();
}

// The old db details should have been switched back by the mysql rollback at this point.
function provision_apache_provision_post_restore_rollback($url, &$data) {
  provision_apache_provision_post_restore($url, $data);
}
