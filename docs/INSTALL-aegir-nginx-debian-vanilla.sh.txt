#!/bin/bash


###----------------------------------------###
###
###  Aegir Nginx on Debian Install Script
###  (GNU/GPL) omega8cc
###  http://drupal.org/user/539502
###
###----------------------------------------###




###----------------------------------------###
### EDIT ME                                ###
###----------------------------------------###
#
# Enter a valid IP address of your server
# and your valid e-mail address.
#
SERVERIP=YO.UR.IP.NR
ADMEMAIL="you@yourdomain"




###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###



###---### Avoid too many questions
#
export DEBIAN_FRONTEND=noninteractive



###---### Functions
#
# noticeable messages
msg() {
  echo "==> $*"
}
# simple prompt
prompt_yes_no() {
  while true ; do
    printf "$* [Y/n] "
    read answer
    if [ -z "$answer" ] ; then
      return 0
    fi
    case $answer in
      [Yy]|[Yy][Ee][Ss])
        return 0
        ;;
      [Nn]|[Nn][Oo])
        return 1
        ;;
      *)
        echo "Please answer yes or no"
        ;;
    esac
 done 
}
#
# stop on error
set -e



###--------------------###
echo " "
msg "Aegir with Nginx on Debian Lenny minimal install automated install script."
if [ `whoami` = "root" ] ; then
  msg "This script is ran as a root user."
  msg "Status OK."
else
  msg "This script should be ran as a root user, su - root first."
  exit 1
fi



###--------------------###
THISHOSTA=`hostname`
THISHOSTB=`echo -n $THISHOSTA | tr -d "\n"`
echo " "
msg "You need to specify the public IP address of your server and your e-mail"
msg "in the top config section of this script."
echo " "
msg "Your server has to have already working FQDN hostname matching your IP address."
msg "This means you _have to_ configure the dns for your server IP/hostname _before_"
msg "trying to use this install script. Reverse dns is _not_ required."
echo " "
msg "Your hostname appears to be $THISHOSTB - are you sure it's a valid FQDN hostname?"
msg "Are you sure your FQDN hostname matches your IP address: $SERVERIP?"
echo " "
msg "If above requirements are not met, your Aegir automated install _will fail_,"
msg "since the script will not check if your IP/hostname is valid or not."
echo " "
msg "If you have closed outgoing SMTP port, uncomment first two lines in section:"
msg "'Do we need a SMTP relay'."
echo " "
if prompt_yes_no "Do you want to proceed with the install?" ; then
  true
else
  echo "installation aborted by user"
  exit 1
fi



###--------------------###
msg "`date` INFO: Simple security check"
echo "..."
sleep 5
if [ -d "/var/aegir" ] ; then
  msg "`date` INFO: Aegir is already installed - exit now"
  exit 1
fi



###--------------------###
msg "`date` INFO: Clean up temp files"
echo "..."
sleep 5
rm -f -r /var/opt/*
mkdir -p /var/log/php
chmod 777 /var/log/php*
mkdir -p /opt/tmp
chmod 777 /opt/tmp



###--------------------###
msg "`date` INFO: Update apt sources"
echo "..."
sleep 5
echo "deb http://ftp.us.debian.org/debian/ lenny main contrib non-free" > /etc/apt/sources.list
echo "deb-src http://ftp.us.debian.org/debian/ lenny main contrib non-free" >> /etc/apt/sources.list
echo "deb http://security.debian.org/ lenny/updates main contrib non-free" >> /etc/apt/sources.list
echo "deb-src http://security.debian.org/ lenny/updates main contrib non-free" >> /etc/apt/sources.list
echo "deb http://ftp.us.debian.org/debian experimental main" >> /etc/apt/sources.list
echo "deb-src http://ftp.us.debian.org/debian/ experimental main" >> /etc/apt/sources.list



###--------------------###
msg "`date` INFO: Add apt sources for MariaDB"
echo "..."
sleep 5
wget -O- http://ourdelta.org/deb/ourdelta.gpg | apt-key add -
wget http://ourdelta.org/deb/sources/lenny-mariadb-ourdelta.list \
      -O /etc/apt/sources.list.d/ourdelta.list



###--------------------###
msg "`date` INFO: Run apt update"
echo "..."
sleep 5
aptitude update
aptitude full-upgrade
aptitude -y install locales
locale-gen en_US en_US.UTF-8 &&



###--------------------###
msg "`date` INFO: Installing required libraries and tools"
echo "..."
sleep 5
aptitude -y install cron ssh build-essential
aptitude -y install postfix
aptitude -y install apticron autoconf automake automake1.4 autotools-dev bc curl cvs defoma devscripts dnsutils dstat fontconfig-config git-core graphicsmagick-imagemagick-compat htop ifstat libapr1 libaprutil1 libc-client-dev libc-client2007b libc-client2007b-dev libcurl4-gnutls-dev libdbd-mysql-perl libdbi-perl libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 libltdl7 libltdl7-dev libmariadbclient-dev libmariadbclient16 libmariadbd-dev libmcrypt-dev libmemcache-dev libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng-dev libpng12-0 libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 m4 makepasswd mariadb-client-5.1 mariadb-common mariadb-server-5.1 mc mcrypt nano nginx ncurses-dev pwgen python-dev python-mysqldb rsync shtool ssl-cert subversion sudo sysstat sysvconfig t1lib-bin time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra whois xml-core xml2 zlib1g-dev zlibc unzip zip



###--------------------###
msg "`date` INFO: Installing a few more tools"
echo "..."
sleep 5
cd /var
wget http://omega8.cc/dev/little_xdrago.tar.gz
tar -xzf little_xdrago.tar.gz &&
rm -f little_xdrago.tar.gz
cp -af /var/xdrago/etc /opt/
cp -f /opt/etc/init.d/* /etc/init.d/
cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/
perl -p -i -e "s/(>127.0.0.1<)/\>127.0.0.1,$SERVERIP\</g" /opt/etc/php-fpm.conf
perl -p -i -e "s/(root)/$ADMEMAIL/g" /etc/apticron/apticron.conf
sh /usr/sbin/apticron &&




###--------------------###
msg "`date` INFO: Do we need a SMTP relay?"
echo "..."
sleep 5
###
### required if you have closed outgoing smtp port and you have to use smtp relay
### in this example it is for Voxel servers
###
#perl -p -i -e "s/(relayhost \=)/relayhost \= smtp\.cust\.voxel\.net/g" /etc/postfix/main.cf
#postfix reload
###
###



###--------------------###
msg "`date` INFO: Installing libevent"
echo "..."
sleep 5
cd /var/opt
rm -f -r libevent*
wget http://www.monkey.org/~provos/libevent-1.4.14b-stable.tar.gz
tar -xzf libevent-1.4.14b-stable.tar.gz &&
cd libevent-1.4.14b-stable &&
./configure --prefix=/usr &&
make &&
make install
cd /var/opt
rm -f -r libevent*
wget http://www.monkey.org/~provos/libevent-1.4.14b-stable.tar.gz
tar -xzf libevent-1.4.14b-stable.tar.gz &&
cd libevent-1.4.14b-stable &&
./configure &&
make &&
make install
cd /var/opt
ldconfig



###--------------------###
msg "`date` INFO: Installing PHP-FPM"
echo "..."
sleep 5
cd /var/opt
rm -f -r php*
cp -f /etc/init.d/php-fpm /etc/init.d/php-fpm.bak
cd /var/opt
wget http://www.php.net/distributions/php-5.2.13.tar.gz 
wget http://download.suhosin.org/suhosin-patch-5.2.13-0.9.7.patch.gz
wget http://launchpad.net/php-fpm/master/0.6/+download/php-fpm-0.6~5.2.patch
tar -xzf php-5.2.13.tar.gz 
gunzip suhosin-patch-5.2.13-0.9.7.patch.gz
cat suhosin-patch-5.2.13-0.9.7.patch | patch -d php-5.2.13 -p1
cat php-fpm-0.6~5.2.patch | patch -d php-5.2.13 -p1
cd php-5.2.13
echo "..."
sleep 5
./buildconf --force
echo "..."
sleep 5
./configure --with-fpm \
--enable-fastcgi \
--with-mysql \
--with-mysqli \
--enable-force-cgi-redirect \
--enable-discard-path \
--with-zlib \
--with-curl \
--with-curlwrappers \
--with-gd \
--enable-gd-native-ttf \
--with-jpeg-dir=/usr \
--with-png-dir=/usr \
--with-freetype-dir=/usr \
--with-t1lib=/usr \
--with-pear \
--with-imap \
--with-imap-ssl \
--with-openssl \
--with-pdo-mysql \
--enable-soap \
--enable-ftp \
--enable-mbstring \
--enable-pcntl \
--enable-bcmath \
--with-kerberos \
--with-xsl \
--with-libevent=shared \
--with-mcrypt &&
make all install &&
cp -f /etc/init.d/php-fpm.bak /etc/init.d/php-fpm
cd /var/opt



###--------------------###
msg "`date` INFO: Installing memcache for php"
echo "..."
sleep 5
cd /var/opt
wget http://pecl.php.net/get/memcache-3.0.3.tgz
tar -xzf memcache-3.0.3.tgz &&
cd memcache-3.0.3 &&
/usr/local/bin/phpize &&
./configure --with-php-config=/usr/local/bin/php-config &&
make &&
make install
cd /var/opt



###--------------------###
msg "`date` INFO: Installing suhosin for php"
echo "..."
sleep 5
cd /var/opt
wget http://download.suhosin.org/suhosin-0.9.31.tgz
tar -xzf suhosin-0.9.31.tgz &&
cd suhosin-0.9.31 &&
/usr/local/bin/phpize &&
./configure --with-php-config=/usr/local/bin/php-config &&
make &&
make install
cd /var/opt



###--------------------###
msg "`date` INFO: Installing uploadprogress for php"
echo "..."
sleep 5
cd /var/opt
wget http://pecl.php.net/get/uploadprogress-1.0.1.tgz
tar -xzf uploadprogress-1.0.1.tgz &&
cd uploadprogress-1.0.1 &&
/usr/local/bin/phpize &&
./configure --with-php-config=/usr/local/bin/php-config &&
make &&
make install
cd /var/opt



###--------------------###
msg "`date` INFO: Installing apc for php"
echo "..."
sleep 5
cd /var/opt
wget http://pecl.php.net/get/APC-3.1.3p1.tgz
tar -xzf APC-3.1.3p1.tgz &&
cd APC-3.1.3p1 &&
/usr/local/bin/phpize &&
./configure --with-php-config=/usr/local/bin/php-config &&
make &&
make install
cd /var/opt



###--------------------###
msg "`date` INFO: Installing bzr"
echo "..."
sleep 5
cd /var/opt
wget http://launchpad.net/bzr/2.2/2.2b4/+download/bzr-2.2b4.tar.gz
tar -xzf bzr-2.2b4.tar.gz &&
cd bzr-2.2b4
python setup.py install build_ext --allow-python-fallback &&
cd /var/opt



###--------------------###
msg "`date` INFO: Installing Nginx"
echo "..."
sleep 5
cd /var/opt
rm -f -r nginx*
git clone git://github.com/masterzen/nginx-upload-progress-module.git &&
wget http://sysoev.ru/nginx/nginx-0.8.46.tar.gz &&
tar -xzf nginx-0.8.46.tar.gz &&
cd nginx-0.8.46 &&
./configure --prefix=/usr \
--sbin-path=/usr/sbin/nginx \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--pid-path=/var/run/nginx.pid \
--lock-path=/var/lock/nginx.lock \
--user=www-data \
--group=www-data \
--with-http_realip_module \
--with-rtsig_module \
--with-http_gzip_static_module \
--with-http_stub_status_module \
--with-http_ssl_module \
--without-mail_pop3_module \
--without-mail_imap_module \
--without-mail_smtp_module \
--add-module=/var/opt/nginx-upload-progress-module/ &&
make &&
make install
cd /var/opt



###--------------------###
msg "`date` INFO: Update rc.d"
echo "..."
sleep 5
update-rc.d php-fpm defaults; invoke-rc.d php-fpm start
update-rc.d nginx defaults; invoke-rc.d nginx start
cd /etc/mysql
mv -f my.cnf my.cnf.bak.copy
wget http://omega8.cc/dev/my.cnf.txt
mv my.cnf.txt my.cnf
invoke-rc.d mysql restart



###--------------------###
msg "`date` INFO: Installing Pure-FTPd"
echo "..."
sleep 5
echo "/bin/false" >> /etc/shells
echo "/bin/true" >> /etc/shells
mkdir -p /etc/ssl/private/
rm -f /etc/ssl/private/pure-ftpd.pem
rm -f /usr/local/sbin/pure-ftpd
openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem -batch &&
chmod 600 /etc/ssl/private/pure-ftpd.pem
cd /var/opt
mkdir -p /usr/local/etc
rm -f -R pure-ftpd*
wget http://download.pureftpd.org/pub/pure-ftpd/releases/pure-ftpd-1.0.29.tar.gz
tar -xzf pure-ftpd-1.0.29.tar.gz &&
cd pure-ftpd-1.0.29
./configure --with-everything \
--with-virtualchroot \
--without-humor \
--with-tls \
--with-diraliases \
--with-pam \
--with-certfile=/etc/ssl/private/pure-ftpd.pem
make install-strip &&
cd /usr/local/sbin/
wget http://omega8.cc/dev/pure-config.pl.txt
mv pure-config.pl.txt pure-config.pl
chmod 755 /usr/local/sbin/pure-config.pl
cp -f /var/opt/pure-ftpd-1.0.29/pam/pure-ftpd /etc/pam.d/
cd /usr/local/etc
rm -f pure-ftpd.conf
wget http://omega8.cc/dev/pure-ftpd.conf
sleep 5
/usr/local/sbin/pure-config.pl /usr/local/etc/pure-ftpd.conf
cd /var/opt



###--------------------###
msg "`date` INFO: Clean up temp files"
echo "..."
sleep 5
rm -f -r /var/opt/*



###--------------------###
msg "`date` INFO: Generate random password for MariaDB"
echo "..."
sleep 5
touch /root/.my.pass.txt
chmod 0600 /root/.my.pass.txt
pwgen -c -y -s > /root/.my.pass.txt
PXSWD=`cat /root/.my.pass.txt`
PASWD=`echo -n $PXSWD | tr -d "\n"`
for Files in `find /var/xdrago -type f`
do
  perl -p -i -e "s/(NdKBu34erty325r6mUHxWy)/$PASWD/g" $Files
done
echo OS and services installation completed
echo "..."
echo "..."
echo "..."



###--------------------###
msg "`date` INFO: Installing Aegir"
echo "..."
sleep 5
adduser --system --group --home /var/aegir aegir
adduser aegir www-data
echo "aegir ALL=NOPASSWD: /etc/init.d/nginx" >> /etc/sudoers
ln -s /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf
touch /root/.aegir_root.pass.txt
chmod 0600 /root/.aegir_root.pass.txt
pwgen -c -y -s > /root/.aegir_root.pass.txt
AGRPXSWD=`cat /root/.aegir_root.pass.txt`
AGRPASWD=`echo -n $AGRPXSWD | tr -d "\n"`
/usr/bin/mysql -h localhost --port=3306 -u root mysql<<EOFMYSQL
FLUSH PRIVILEGES;
GRANT ALL PRIVILEGES ON *.* TO 'aegir_root'@'%' IDENTIFIED BY '$AGRPASWD' WITH GRANT OPTION;
FLUSH PRIVILEGES;
EOFMYSQL
cd /var/aegir
wget http://github.com/omega8cc/provision/raw/dev-nginx/install.sh.txt
echo "..."
sleep 5
su -s /bin/sh aegir -c "sh install.sh.txt $THISHOSTB --master_db='mysql://aegir_root:$AGRPASWD@localhost' --http_service_type='nginx' --db_service_type='mysql' --client_email='$ADMEMAIL' -d"
msg "`date` INFO: AEGIR installation completed"
echo "..."
echo "..."
echo "..."



###--------------------###
msg "`date` INFO: MariaDB final setup"
echo "..."
sleep 5
echo " "
msg "Please COPY it NOW and set it as your MariaDB root password during mysql_secure_installation"
echo " "
echo --------vvvvvvvv--------
echo ------- $PASWD -------
echo --------^^^^^^^^--------
echo " "
msg "Please remember, you don't have the root password for MariaDB set yet."
cat <<EOF
 * You need to hit Enter _without_ entering the password on the first question you will see.
 * On the second question say Y and then enter your root password '$PASWD' twice.
 * Then say Y on all remaining questions.
EOF
echo " "
msg "...waiting now 60 sec before running interactive mysql_secure_installation..."
echo " "
echo " "
sleep 60
mysql_secure_installation
echo "..."
sleep 5
echo "[client]" >> /root/.my.cnf
echo "user=root" >> /root/.my.cnf
echo "password=$PASWD" >> /root/.my.cnf
chmod 0600 /root/.my.cnf
service cron restart
msg "`date` INFO: MariaDB setup completed"
msg "`date` INFO: ALL DONE!"
exit 0

###----------------------------------------###
###
###  Aegir Nginx on Debian Install Script
###  (GNU/GPL) omega8cc
###  http://drupal.org/user/539502
###
###----------------------------------------###

#EOF
