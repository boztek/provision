<?php
// $Id$
/**
* @file
*   Provisioning Framework
*/

// Include the provisioning API. 
include_once('provision.inc');
include_once('provision.path.inc');
include_once('provision.drush.inc');


/** 
 * Implementation of hook_init
 *
 * Provide defines for all the major paths and settings.
 * These are settings that must not be modified during the running of the
 * program, but are configurable.
 */
function provision_init() {
  // Do not allow the program to be run as the root user. ever
  $name = posix_getpwuid(posix_geteuid());
  if ($name['name'] == 'root') {
    provision_log('error', 'You are running the provision script as the root user. Exiting');
    provision_set_error(PROVISION_FRAMEWORK_ERROR);
    provision_output($url);
  }

  // Load requested additional modules
  provision_load_from_args();

  // Set up defines for platform
  $docroot = provision_get_option(array("r", "root"), $_SERVER['PWD']);
  $backend = provision_get_option(array('b', 'backend'), 0);
  define("PROVISION_DRUSH_BACKEND", $backend);
  
  define('PROVISION_DOMAIN', $_SERVER['HTTP_HOST']);
  // Paths
  $path =  ($docroot) ? $docroot : $_SERVER['DOCUMENT_ROOT'];
  define('PROVISION_DOCROOT_PATH', rtrim($path, '/'));
  define('PROVISION_SITES_PATH', rtrim($path, '/') .'/sites');
  define('PROVISION_DRUSH_PATH', './drush.php');
  $parts = explode("/", rtrim($path, '/'));
  array_pop($parts);
  define('PROVISION_PARENT_PATH', rtrim(implode("/" , $parts), '/'));
  define('PROVISION_BACKUP_PATH', 
    provision_get_option('backup_path', PROVISION_PARENT_PATH . '/backups'));
  define('PROVISION_CONFIG_PATH', 
    provision_get_option('config_path', PROVISION_PARENT_PATH .'/config'));
  define('PROVISION_VHOST_PATH', PROVISION_CONFIG_PATH .'/vhost.d');

  // Commands
  define('PROVISION_RESTART_CMD',
    provision_get_option('restart_cmd', _provision_default_restart_cmd()));

  // System account
  $info = posix_getgrgid(posix_getgid());
  define('PROVISION_WEB_GROUP', 
    provision_get_option('web_group', $info['name'] ));
  define('PROVISION_SCRIPT_USER', 
    provision_get_option('script_user', get_current_user() ));

  // Redirection urls
  define('PROVISION_MASTER_URL', 
    provision_get_option('master_url', variable_get('install_url', $GLOBALS['base_url'])));
  define('PROVISION_WEB_DISABLE_URL', PROVISION_MASTER_URL .'/provision/disabled');
  define('PROVISION_WEB_MAINTENENCE_URL', PROVISION_MASTER_URL .'/provision/maintenance');

  // Database
  define('PROVISION_MASTER_DB', 
    provision_get_option('master_db', $GLOBALS['db_url']));
  $db = parse_url(PROVISION_MASTER_DB);
  define('PROVISION_DB_USER', $db['user']);
  define('PROVISION_DB_PASSWD', $db['pass']);
  define('PROVISION_DB_HOST', $db['host']);
 
  // Drupal does not support multiple types of connections in the same session
  preg_match("$^([a-z]*)://$", $GLOBALS['db_url'], $matches);
  define('PROVISION_DB_TYPE', $matches[1]);
}



/**
 * Load additional modules just for this process
 *
 * Load additional modules specified by --load_module_name
 */
function provision_load_from_args() {
  if (!function_exists('drush_verify_cli')) {
    return null;
  }
  global $args;
  $reset = FALSE;
  foreach ($args['options'] as $arg => $value) {
    if (preg_match("/^load-([a-z\-]*)$/", $arg, $matches)) {
      $module = str_replace("-", "_", $matches[1]);
      // find file : can only search under provision path
      $files = file_scan_directory(dirname(__FILE__), "$module.module", array('.', '..', 'CVS'), 0, TRUE, 'name');
      if (isset($files[$module])) {
        provision_log("notice", t("Loading @module on request", array("@module" => $module)));
        $loaded[$module]['name'] = $module;
        $loaded[$module]['filename']  = $files[$module]->filename;
        include_once($loaded[$module]['filename']);
      }
      $reset = TRUE;
    }
  }
  $existing = array();
  $list = module_list(TRUE, FALSE);
  foreach ($list as $module) {
    $existing[$module]['name'] = $module;
    $existing[$module]['filename'] = drupal_get_filename('module', $module);
    drupal_load('module', $module);
  }
  $loaded = array_merge($existing, (array) $loaded);
  foreach ($loaded as $name => $info) {
    $files = file_scan_directory(dirname($info['filename']), ".drush.inc$");
    foreach ($files as $filename => $info2) {
      include_once($filename);
    }

  }
  module_list(TRUE, FALSE, TRUE, $loaded);
  // Force to regenerate the stored list of hook implementations.
  module_implements('', TRUE, TRUE);
}
function _provision_default_restart_cmd() {
  # try to detect the apache restart command
  $command = '/usr/sbin/apachectl'; # a proper default for most of the world
  foreach (array('/usr/local/sbin/apachectl', # freebsd
                 '/usr/sbin/apache2ctl', # debian + apache2
      $command) as $test) {
    if (is_executable($test)) {
      $command = $test;
    }
  }

  return "sudo $command graceful";
}

/**
 * Generate a provision.settings.php file to configure provision
 */
function _provision_generate_config() {
  provision_log('notice', t("Generating drushrc.php file"));
  provision_path("chmod", PROVISION_DOCROOT_PATH . '/drushrc.php', 0600,
     t('Changed permissions of drushrc.php to @confirm'),
      t('Could not change permissions of drushrc.php to @confirm'));

  provision_save_platform_data();
  provision_path("chmod", PROVISION_DOCROOT_PATH . '/drushrc.php', 0400,
    t('Changed permissions of drushrc.php to @confirm'),
    t('Could not change permissions of drushrc.php to @confirm'));
  return TRUE;
}

/**
 * @defgroup provisionui Configure provisioning framework.
 * @{
 */

/**
 * Implementation of hook_menu().
 */
function provision_menu() {
  $items['provision'] = array(
    'title' => 'Configure your platform',
    'description' => 'Configure your platform.',
    'page callback' => 'provision_front',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['provision/disabled'] = array(
    'title' => 'Site disabled',
    'description' => 'Page showed when a site is disabled.',
    'page callback' => 'provision_disabled_site',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  $items['provision/maintenance'] = array(
    'title' => 'Site is undergoing maintenance.',
    'description' => 'Page shown when a site is being restored or moved etc.',
    'page callback' => 'provision_site_maintenance',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['provision/notfound'] = array(
    'title' => 'Site not found.',
    'description' => 'The site you have requested is not available.',
    'page callback' => 'provision_site_notfound',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

function provision_front() {
  if (variable_get('provision_setup', FALSE)) {
    drupal_goto('provision/notfound');
  }
  #return _provision_requirements("provision_setup");
}

function provision_disabled_site() {
  drupal_set_breadcrumb(array());
  return "<p>This site was disabled by the site administrators.</p>";
}

function provision_site_maintenance() {
  drupal_set_breadcrumb(array());
  return "<p>This site is being worked on presently. Check back later.</p>";
}

function provision_site_notfound() {
  drupal_set_breadcrumb(array());
  return "<p>The site you have requested does not exist.</p>";
}

/**
 * @} End of "defgroup provisionui"
 */


